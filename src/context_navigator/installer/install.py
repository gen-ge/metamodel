#!/usr/bin/env python3
"""
üöÄ Context Navigator - Instalador
Instala o Context Navigator em qualquer workspace de forma isolada
"""

import os
import sys
import shutil
import subprocess
import json
import yaml
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Optional

class ContextNavigatorInstaller:
    def __init__(self, target_path: str = ".", global_install: bool = False):
        """
        Inicializa o instalador
        
        Args:
            target_path: Caminho do workspace onde instalar (padr√£o: diret√≥rio atual)
            global_install: Se True, instala globalmente no sistema
        """
        self.global_install = global_install
        self.target_path = Path(target_path).resolve()
        
        if global_install:
            # Instala√ß√£o global
            self.install_dir = Path.home() / ".local" / "share" / "context-navigator"
            self.bin_dir = Path.home() / ".local" / "bin"
        else:
            # Instala√ß√£o local
            self.install_dir = self.target_path / ".context-navigator"
            self.bin_dir = self.target_path
            
        # Detectar se estamos em um pacote extra√≠do ou em desenvolvimento
        installer_path = Path(__file__).parent.resolve()
        
        # Se install.py est√° na raiz de um pacote extra√≠do, source_dir √© o diret√≥rio do pacote
        if (installer_path.parent / "source").exists():
            self.source_dir = installer_path.parent
        else:
            # Estamos em desenvolvimento, usar estrutura src/
            self.source_dir = installer_path
        
        # Vers√£o do Context Navigator
        self.version = "1.0.0"
        
        print(f"üéØ Context Navigator Installer v{self.version}")
        if global_install:
            print(f"üåê Instala√ß√£o Global")
            print(f"üì¶ Instalando em: {self.install_dir}")
            print(f"üîß Launcher em: {self.bin_dir}")
        else:
            print(f"üìÅ Instala√ß√£o Local - Workspace: {self.target_path}")
            print(f"üì¶ Instalando em: {self.install_dir}")
        
    def check_prerequisites(self) -> bool:
        """Verifica pr√©-requisitos do sistema"""
        print("\nüîç Verificando pr√©-requisitos...")
        
        # Verificar Python
        if sys.version_info < (3, 7):
            print("‚ùå Python 3.7+ necess√°rio")
            return False
        print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor}")
        
        # Verificar se √© um workspace v√°lido
        if not self.target_path.exists():
            print(f"‚ùå Workspace n√£o encontrado: {self.target_path}")
            return False
        print(f"‚úÖ Workspace v√°lido: {self.target_path}")
        
        # Verificar se source dir existe
        if not self.source_dir.exists():
            print(f"‚ùå Diret√≥rio fonte n√£o encontrado: {self.source_dir}")
            return False
        print(f"‚úÖ Arquivos fonte encontrados: {self.source_dir}")
        
        return True
        
    def backup_existing_installation(self) -> bool:
        """Faz backup de instala√ß√£o existente"""
        if self.install_dir.exists():
            print(f"\nüîÑ Instala√ß√£o existente encontrada...")
            backup_dir = self.target_path / f".context-navigator-backup-{datetime.now().strftime('%Y%m%d-%H%M%S')}"
            
            try:
                shutil.move(str(self.install_dir), str(backup_dir))
                print(f"‚úÖ Backup criado: {backup_dir}")
                return True
            except Exception as e:
                print(f"‚ùå Erro ao criar backup: {e}")
                return False
                
        return True
        
    def create_installation_directory(self) -> bool:
        """Cria estrutura de diret√≥rios da instala√ß√£o"""
        print(f"\nüìÅ Criando estrutura de diret√≥rios...")
        
        try:
            self.install_dir.mkdir(exist_ok=True)
            
            # Criar subdiret√≥rios
            subdirs = ["scripts", "templates", "docs", "examples"]
            for subdir in subdirs:
                (self.install_dir / subdir).mkdir(exist_ok=True)
                print(f"‚úÖ Criado: {subdir}/")
                
            return True
        except Exception as e:
            print(f"‚ùå Erro ao criar diret√≥rios: {e}")
            return False
            
    def copy_files(self) -> bool:
        """Copia arquivos necess√°rios para a instala√ß√£o"""
        print(f"\nüìã Copiando arquivos...")
        
        # Detectar se estamos em pacote extra√≠do ou desenvolvimento
        if (self.source_dir / "source").exists():
            # Pacote extra√≠do - usar pasta source/
            source_dir = self.source_dir / "source"
        else:
            # Desenvolvimento - usar estrutura src/
            source_dir = self.source_dir.parent
            
        # Verificar se pasta source/ existe
        if not source_dir.exists():
            print(f"‚ùå Pasta source/ n√£o encontrada em: {source_dir}")
            return False
            
        # Mapeamento de arquivos para copiar (de source/ para instala√ß√£o)
        files_to_copy = {
            # Scripts
            "scripts/": "scripts/",
            # Templates
            "templates/": "templates/",
            # Core (n√£o vai para instala√ß√£o final)
            # "core/": "core/",
            # Configura√ß√£o
            "context.rule": "context.rule",
            ".contextrc": ".contextrc",
            # CLI
            "cn_cli.py": "cn_cli.py"
        }
        
        # Arquivos de documenta√ß√£o (do root do pacote)
        docs_files = {
            "docs/": "docs/",
            "examples/": "examples/",
            "README.md": "README.md",
            "QUICK_START.md": "QUICK_START.md",
            "INSTALL.md": "INSTALL.md"
        }
        
        try:
            # Copiar arquivos da pasta source/
            for source, dest in files_to_copy.items():
                source_path = source_dir / source
                dest_path = self.install_dir / dest
                
                if source_path.exists():
                    if source_path.is_dir():
                        if dest_path.exists():
                            shutil.rmtree(dest_path)
                        shutil.copytree(source_path, dest_path)
                        print(f"‚úÖ Copiado: source/{source} -> {dest}")
                    else:
                        dest_path.parent.mkdir(parents=True, exist_ok=True)
                        shutil.copy2(source_path, dest_path)
                        print(f"‚úÖ Copiado: source/{source} -> {dest}")
                else:
                    print(f"‚ö†Ô∏è  Arquivo n√£o encontrado: source/{source}")
            
            # Copiar arquivos de documenta√ß√£o (do root do pacote)
            for source, dest in docs_files.items():
                source_path = self.source_dir / source
                dest_path = self.install_dir / dest
                
                if source_path.exists():
                    if source_path.is_dir():
                        if dest_path.exists():
                            shutil.rmtree(dest_path)
                        shutil.copytree(source_path, dest_path)
                        print(f"‚úÖ Copiado: {source} -> {dest}")
                    else:
                        dest_path.parent.mkdir(parents=True, exist_ok=True)
                        shutil.copy2(source_path, dest_path)
                        print(f"‚úÖ Copiado: {source} -> {dest}")
                else:
                    print(f"‚ö†Ô∏è  Arquivo n√£o encontrado: {source}")
                    
            return True
        except Exception as e:
            print(f"‚ùå Erro ao copiar arquivos: {e}")
            return False
            
    def create_version_file(self) -> bool:
        """Cria arquivo de vers√£o"""
        try:
            version_info = {
                "version": self.version,
                "installed_at": datetime.now().isoformat(),
                "workspace": str(self.target_path),
                "python_version": f"{sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}"
            }
            
            version_file = self.install_dir / "VERSION"
            with open(version_file, 'w', encoding='utf-8') as f:
                json.dump(version_info, f, indent=2, ensure_ascii=False)
                
            print(f"‚úÖ Arquivo de vers√£o criado: VERSION")
            return True
        except Exception as e:
            print(f"‚ùå Erro ao criar arquivo de vers√£o: {e}")
            return False
            
    def create_context_map_directory(self) -> bool:
        """Cria diret√≥rio de contexto interno (n√£o cria pasta externa)"""
        try:
            # O diret√≥rio .context-navigator/context-map/ √© criado automaticamente pelo scanner
            # A pasta externa .context-map/ era lixo de vers√µes anteriores
            print(f"‚úÖ Diret√≥rio de contexto ser√° criado automaticamente pelo scanner")
            return True
        except Exception as e:
            print(f"‚ùå Erro: {e}")
            return False
            
    def create_launcher_script(self) -> bool:
        """Cria launcher e documenta√ß√£o - Local ou Global"""
        print(f"\nüìã Criando launcher e documenta√ß√£o...")
        
        if self.global_install:
            return self.create_global_launcher()
        else:
            return self.create_local_launcher()
    
    def create_global_launcher(self) -> bool:
        """Cria launcher global no PATH"""
        try:
            # Criar diret√≥rio bin se n√£o existir
            self.bin_dir.mkdir(parents=True, exist_ok=True)
            
            # Copiar launcher global
            source_launcher = self.source_dir / "source" / "scripts" / "cn_global_launcher.py"
            target_launcher = self.bin_dir / "cn"
            
            if source_launcher.exists():
                import shutil
                shutil.copy2(source_launcher, target_launcher)
                # Tornar execut√°vel
                import os
                os.chmod(target_launcher, 0o755)
                print(f"‚úÖ Launcher global criado: {target_launcher}")
            else:
                print(f"‚ö†Ô∏è  Launcher global n√£o encontrado: {source_launcher}")
                return False
            
            # Criar documenta√ß√£o global
            docs_content = f'''# Context Navigator - Instala√ß√£o Global

## üåê INSTALA√á√ÉO GLOBAL ATIVA

O Context Navigator foi instalado globalmente em seu sistema.

### üìã USAR DE QUALQUER DIRET√ìRIO:

```bash
cn scan                    # Escanear documentos
cn demo                    # Demonstra√ß√£o completa
cn help                    # Ver todos os comandos
```

### üéØ BUSCA AUTOM√ÅTICA:

O launcher global busca automaticamente por:
1. .context-navigator/ no diret√≥rio atual
2. .context-navigator/ em diret√≥rios pais
3. Instala√ß√£o global do sistema

### üí° CONFIGURA√á√ÉO DO PATH:

Para usar o comando 'cn' globalmente, adicione ao seu ~/.bashrc:

```bash
export PATH="$HOME/.local/bin:$PATH"
```

### üìÅ ESTRUTURA INSTALADA:
- ~/.local/share/context-navigator/  - Sistema instalado
- ~/.local/bin/cn                    - Launcher global
- [workspace]/.context-navigator/    - Instala√ß√µes locais

### üîß COMANDOS DISPON√çVEIS:
- cn scan            - Escanear documentos
- cn demo            - Demonstra√ß√£o completa
- cn validate        - Validar m√©tricas
- cn new TYPE nome   - Criar novo documento
- cn help            - Ajuda completa
'''
            
            # Criar arquivo de documenta√ß√£o
            docs_file = self.install_dir / "HOW_TO_USE.md"
            with open(docs_file, 'w', encoding='utf-8') as f:
                f.write(docs_content)
            print(f"‚úÖ Documenta√ß√£o global criada: HOW_TO_USE.md")
            
            return True
        except Exception as e:
            print(f"‚ùå Erro ao criar launcher global: {e}")
            return False
    
    def create_local_launcher(self) -> bool:
        """Cria launcher local - comportamento original"""
        # Criar arquivo de documenta√ß√£o local
        docs_content = f'''# Context Navigator - Como Usar (BUSCA INTELIGENTE)

## üéØ BUSCA AUTOM√ÅTICA ATIVADA

O Context Navigator agora busca automaticamente por .context-navigator/ no diret√≥rio atual e em diret√≥rios pais.

### üìã COMANDOS B√ÅSICOS:

Para usar o Context Navigator, execute sempre:

```bash
python3 -m context_navigator.cn_cli COMANDO
```

### üéØ COMANDOS DISPON√çVEIS:

üìä PRINCIPAIS:
- python3 -m context_navigator.cn_cli scan
- python3 -m context_navigator.cn_cli demo  
- python3 -m context_navigator.cn_cli help

üìù CRIAR DOCUMENTOS:
- python3 -m context_navigator.cn_cli new decision nome
- python3 -m context_navigator.cn_cli new process nome
- python3 -m context_navigator.cn_cli new reference nome

### üí° ALIAS OPCIONAL (configure voc√™ mesmo):

Se quiser usar apenas "cn", adicione ao seu ~/.bashrc:

```bash
alias cn="python3 -m context_navigator.cn_cli"
```

### üåê USAR GLOBALMENTE:

Para usar de qualquer diret√≥rio, copie o launcher global para o PATH:

```bash
cp {self.install_dir}/scripts/cn_global_launcher.py ~/.local/bin/cn
chmod +x ~/.local/bin/cn
```

### üéØ BUSCA INTELIGENTE:
- Busca .context-navigator/ no diret√≥rio atual
- Busca .context-navigator/ em diret√≥rios pais
- Permite usar de subdiret√≥rios do projeto

### üìÅ ESTRUTURA CRIADA:
- .context-navigator/docs/     - Documentos organizados
- .context-navigator/scripts/  - Scripts do sistema
- .context-navigator/templates/ - Templates dispon√≠veis
'''
        
        try:
            # Criar arquivo de documenta√ß√£o
            docs_file = self.install_dir / "HOW_TO_USE.md"
            with open(docs_file, 'w', encoding='utf-8') as f:
                f.write(docs_content)
            print(f"‚úÖ Documenta√ß√£o criada: HOW_TO_USE.md")
            
            return True
        except Exception as e:
            print(f"‚ùå Erro ao criar documenta√ß√£o: {e}")
            return False
            
    def test_installation(self) -> bool:
        """Testa se a instala√ß√£o est√° funcionando - COMPORTAMENTO BURRO"""
        print(f"\nüß™ Testando instala√ß√£o...")
        
        try:
            # Verificar se arquivos essenciais foram copiados
            essential_files = [
                "scripts/context_scanner.py",
                "templates/decisao.md",
                ".contextrc",
                "context.rule",
                "HOW_TO_USE.md"
            ]
            
            for file_path in essential_files:
                full_path = self.install_dir / file_path
                if not full_path.exists():
                    print(f"‚ùå Arquivo essencial n√£o encontrado: {file_path}")
                    return False
            
            print("‚úÖ Arquivos essenciais verificados")
            
            # Verificar se a estrutura de diret√≥rios foi criada
            essential_dirs = [
                "scripts",
                "templates", 
                "docs",
                "examples"
            ]
            
            for dir_path in essential_dirs:
                full_path = self.install_dir / dir_path
                if not full_path.exists() or not full_path.is_dir():
                    print(f"‚ùå Diret√≥rio essencial n√£o encontrado: {dir_path}")
                    return False
            
            print("‚úÖ Estrutura de diret√≥rios verificada")
            return True
                
        except Exception as e:
            print(f"‚ùå Erro no teste: {e}")
            return False
            
    def show_completion_message(self) -> None:
        """Mostra mensagem de conclus√£o - COMPORTAMENTO BURRO"""
        print(f"\n" + "="*60)
        print(f"üéâ INSTALA√á√ÉO CONCLU√çDA COM SUCESSO!")
        print(f"="*60)
        print(f"")
        print(f"üìÅ Workspace: {self.target_path}")
        print(f"üì¶ Instala√ß√£o: {self.install_dir}")
        print(f"üìã Documenta√ß√£o: {self.install_dir}/HOW_TO_USE.md")
        print(f"")
        print(f"ü§ñ COMPORTAMENTO BURRO:")
        print(f"")
        print(f"1. üìã Ver comandos dispon√≠veis:")
        print(f"   python3 -m context_navigator.cn_cli help")
        print(f"")
        print(f"2. üß™ Testar o sistema:")
        print(f"   python3 -m context_navigator.cn_cli demo")
        print(f"")
        print(f"3. üìù Criar seu primeiro documento:")
        print(f"   python3 -m context_navigator.cn_cli new decision minha_decisao")
        print(f"")
        print(f"4. üîç Escanear documentos:")
        print(f"   python3 -m context_navigator.cn_cli scan")
        print(f"")
        print(f"5. üìä Validar m√©tricas:")
        print(f"   python3 -m context_navigator.cn_cli validate")
        print(f"")
        print(f"üí° CONFIGURA√á√ÉO OPCIONAL:")
        print(f"‚Ä¢ Para usar apenas 'cn', adicione ao ~/.bashrc:")
        print(f"  alias cn='python3 -m context_navigator.cn_cli'")
        print(f"‚Ä¢ Leia {self.install_dir}/HOW_TO_USE.md para detalhes")
        print(f"")
        print(f"üéØ Software que funciona sempre igual - BURRO INTELIGENTE!")
        print(f"")
        
    def install(self) -> bool:
        """Executa processo completo de instala√ß√£o"""
        print(f"\nüöÄ Iniciando instala√ß√£o do Context Navigator...")
        
        steps = [
            ("Verificar pr√©-requisitos", self.check_prerequisites),
            ("Fazer backup", self.backup_existing_installation),
            ("Criar diret√≥rios", self.create_installation_directory),
            ("Copiar arquivos", self.copy_files),
            ("Criar vers√£o", self.create_version_file),
            ("Criar context-map", self.create_context_map_directory),
            ("Criar launcher", self.create_launcher_script),
            ("Testar instala√ß√£o", self.test_installation)
        ]
        
        for step_name, step_func in steps:
            print(f"\nüìã {step_name}...")
            if not step_func():
                print(f"‚ùå Falha na etapa: {step_name}")
                return False
                
        self.show_completion_message()
        return True

def main():
    """Fun√ß√£o principal"""
    import argparse
    
    parser = argparse.ArgumentParser(description='Context Navigator Installer')
    parser.add_argument('--target', '-t', default='.',
                       help='Diret√≥rio onde instalar (padr√£o: atual)')
    parser.add_argument('--force', '-f', action='store_true',
                       help='For√ßar instala√ß√£o mesmo se j√° existir')
    parser.add_argument('--global', '-g', action='store_true',
                       help='Instalar globalmente no sistema (~/.local/)')
    
    args = parser.parse_args()
    
    global_install = getattr(args, 'global', False)
    installer = ContextNavigatorInstaller(args.target, global_install)
    
    if installer.install():
        print("\n‚úÖ Instala√ß√£o conclu√≠da com sucesso!")
        
        if global_install:
            print("\nüåê INSTALA√á√ÉO GLOBAL ATIVA!")
            print("üí° Para usar globalmente, adicione ao ~/.bashrc:")
            print("   export PATH=\"$HOME/.local/bin:$PATH\"")
            print("üéØ Depois execute: cn help")
        else:
            print("\nüìÅ INSTALA√á√ÉO LOCAL ATIVA!")
            print("üí° Para usar globalmente, copie o launcher:")
            print(f"   cp {installer.install_dir}/scripts/cn_global_launcher.py ~/.local/bin/cn")
            print("   chmod +x ~/.local/bin/cn")
        
        return 0
    else:
        print("\n‚ùå Falha na instala√ß√£o")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 