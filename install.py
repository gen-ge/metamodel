#!/usr/bin/env python3
"""
üöÄ Context Navigator - Instalador
Instala o Context Navigator em qualquer workspace de forma isolada
"""

import os
import sys
import shutil
import subprocess
import json
import yaml
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Optional

class ContextNavigatorInstaller:
    def __init__(self, target_path: str = "."):
        """
        Inicializa o instalador
        
        Args:
            target_path: Caminho do workspace onde instalar (padr√£o: diret√≥rio atual)
        """
        self.target_path = Path(target_path).resolve()
        self.install_dir = self.target_path / ".context-navigator"
        self.source_dir = Path(__file__).parent.resolve()
        
        # Vers√£o do Context Navigator
        self.version = "1.0.0"
        
        print(f"üéØ Context Navigator Installer v{self.version}")
        print(f"üìÅ Workspace: {self.target_path}")
        print(f"üì¶ Instalando em: {self.install_dir}")
        
    def check_prerequisites(self) -> bool:
        """Verifica pr√©-requisitos do sistema"""
        print("\nüîç Verificando pr√©-requisitos...")
        
        # Verificar Python
        if sys.version_info < (3, 7):
            print("‚ùå Python 3.7+ necess√°rio")
            return False
        print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor}")
        
        # Verificar se √© um workspace v√°lido
        if not self.target_path.exists():
            print(f"‚ùå Workspace n√£o encontrado: {self.target_path}")
            return False
        print(f"‚úÖ Workspace v√°lido: {self.target_path}")
        
        # Verificar se source dir existe
        if not self.source_dir.exists():
            print(f"‚ùå Diret√≥rio fonte n√£o encontrado: {self.source_dir}")
            return False
        print(f"‚úÖ Arquivos fonte encontrados: {self.source_dir}")
        
        return True
        
    def backup_existing_installation(self) -> bool:
        """Faz backup de instala√ß√£o existente"""
        if self.install_dir.exists():
            print(f"\nüîÑ Instala√ß√£o existente encontrada...")
            backup_dir = self.target_path / f".context-navigator-backup-{datetime.now().strftime('%Y%m%d-%H%M%S')}"
            
            try:
                shutil.move(str(self.install_dir), str(backup_dir))
                print(f"‚úÖ Backup criado: {backup_dir}")
                return True
            except Exception as e:
                print(f"‚ùå Erro ao criar backup: {e}")
                return False
                
        return True
        
    def create_installation_directory(self) -> bool:
        """Cria estrutura de diret√≥rios da instala√ß√£o"""
        print(f"\nüìÅ Criando estrutura de diret√≥rios...")
        
        try:
            self.install_dir.mkdir(exist_ok=True)
            
            # Criar subdiret√≥rios
            subdirs = ["scripts", "templates", "docs", "examples"]
            for subdir in subdirs:
                (self.install_dir / subdir).mkdir(exist_ok=True)
                print(f"‚úÖ Criado: {subdir}/")
                
            return True
        except Exception as e:
            print(f"‚ùå Erro ao criar diret√≥rios: {e}")
            return False
            
    def copy_files(self) -> bool:
        """Copia arquivos necess√°rios para a instala√ß√£o"""
        print(f"\nüìã Copiando arquivos...")
        
        # Mapeamento de arquivos para copiar
        files_to_copy = {
            # Scripts
            "scripts/": "scripts/",
            # Templates
            "templates/": "templates/",
            # Documenta√ß√£o
            "docs/": "docs/",
            # Exemplos
            "examples/": "examples/",
            # Configura√ß√£o
            "context.rule": "context.rule",
            ".contextrc": ".contextrc",
            # Documenta√ß√£o principal
            "README.md": "README.md",
            "QUICK_START.md": "QUICK_START.md",
            "GUIA_IMPLEMENTACAO.md": "GUIA_IMPLEMENTACAO.md"
        }
        
        try:
            for source, dest in files_to_copy.items():
                source_path = self.source_dir / source
                dest_path = self.install_dir / dest
                
                if source_path.exists():
                    if source_path.is_dir():
                        if dest_path.exists():
                            shutil.rmtree(dest_path)
                        shutil.copytree(source_path, dest_path)
                        print(f"‚úÖ Copiado: {source}/ -> {dest}/")
                    else:
                        shutil.copy2(source_path, dest_path)
                        print(f"‚úÖ Copiado: {source} -> {dest}")
                else:
                    print(f"‚ö†Ô∏è  Arquivo n√£o encontrado: {source}")
                    
            return True
        except Exception as e:
            print(f"‚ùå Erro ao copiar arquivos: {e}")
            return False
            
    def create_version_file(self) -> bool:
        """Cria arquivo de vers√£o"""
        try:
            version_info = {
                "version": self.version,
                "installed_at": datetime.now().isoformat(),
                "workspace": str(self.target_path),
                "python_version": f"{sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}"
            }
            
            version_file = self.install_dir / "VERSION"
            with open(version_file, 'w', encoding='utf-8') as f:
                json.dump(version_info, f, indent=2, ensure_ascii=False)
                
            print(f"‚úÖ Arquivo de vers√£o criado: VERSION")
            return True
        except Exception as e:
            print(f"‚ùå Erro ao criar arquivo de vers√£o: {e}")
            return False
            
    def create_context_map_directory(self) -> bool:
        """Cria diret√≥rio .context-map no workspace"""
        try:
            context_map_dir = self.target_path / ".context-map"
            context_map_dir.mkdir(exist_ok=True)
            
            # Criar arquivo inicial vazio
            index_file = context_map_dir / "index.yml"
            if not index_file.exists():
                initial_content = {
                    "version": self.version,
                    "created_at": datetime.now().isoformat(),
                    "documents": {},
                    "connections": {},
                    "last_scan": None
                }
                with open(index_file, 'w', encoding='utf-8') as f:
                    yaml.dump(initial_content, f, default_flow_style=False, allow_unicode=True)
                    
            print(f"‚úÖ Diret√≥rio de contexto criado: .context-map/")
            return True
        except Exception as e:
            print(f"‚ùå Erro ao criar diret√≥rio de contexto: {e}")
            return False
            
    def create_launcher_script(self) -> bool:
        """Cria script launcher 'cn'"""
        print(f"\nüîß Criando launcher 'cn'...")
        
        launcher_content = f'''#!/usr/bin/env python3
"""
Context Navigator - Launcher
Script que executa comandos do Context Navigator de forma simplificada
"""

import os
import sys
import subprocess
import json
from pathlib import Path

def find_context_navigator():
    """Encontra instala√ß√£o do Context Navigator no workspace atual"""
    current_dir = Path.cwd()
    
    # Procurar .context-navigator/ no diret√≥rio atual e pais
    for path in [current_dir] + list(current_dir.parents):
        cn_dir = path / ".context-navigator"
        if cn_dir.exists() and (cn_dir / "scripts").exists():
            return cn_dir
            
    return None

def show_help():
    """Mostra ajuda dos comandos"""
    print("""
üß≠ Context Navigator - Comandos Dispon√≠veis

üìä PRINCIPAIS:
  cn scan                    Escanear documentos
  cn demo                    Demonstra√ß√£o completa
  cn validate                Validar m√©tricas
  cn check                   Verificar sistema
  
üìù DOCUMENTOS:
  cn new decision            Criar nova decis√£o
  cn new process             Criar novo processo
  cn new reference           Criar nova refer√™ncia
  cn new architecture        Criar nova arquitetura
  cn new analysis            Criar nova an√°lise
  cn new planning            Criar novo planejamento
  
üîß AVAN√áADO:
  cn patterns                Detectar padr√µes
  cn conflicts               Detectar conflitos
  cn impact                  Analisar impacto
  cn templates               Validar templates
  
‚ÑπÔ∏è  INFORMA√á√ïES:
  cn version                 Mostrar vers√£o
  cn help                    Esta ajuda
  cn status                  Status da instala√ß√£o
  
üí° EXEMPLOS:
  cn scan                    # Escanear tudo
  cn demo --full             # Demo completa
  cn new decision auth       # Nova decis√£o sobre auth
  cn validate --detailed     # Valida√ß√£o detalhada
""")

def run_script(script_name, args=None):
    """Executa script do Context Navigator"""
    cn_dir = find_context_navigator()
    
    if not cn_dir:
        print("‚ùå Context Navigator n√£o encontrado neste workspace")
        print("üí° Execute 'python3 install.py' para instalar")
        return 1
        
    script_path = cn_dir / "scripts" / f"{{script_name}}.py"
    
    if not script_path.exists():
        print(f"‚ùå Script n√£o encontrado: {{script_name}}")
        return 1
        
    # Executar script
    cmd = [sys.executable, str(script_path)]
    if args:
        cmd.extend(args)
        
    try:
        return subprocess.run(cmd, cwd=Path.cwd()).returncode
    except Exception as e:
        print(f"‚ùå Erro ao executar script: {{e}}")
        return 1

 def create_document(doc_type, name=None):
     """Cria novo documento baseado em template"""
     cn_dir = find_context_navigator()
     
     if not cn_dir:
         print("‚ùå Context Navigator n√£o encontrado")
         return 1
         
     # Mapeamento de tipos em ingl√™s para portugu√™s
     type_mapping = {{
         "decision": "decisao",
         "process": "processo",
         "reference": "referencia",
         "architecture": "arquitetura",
         "analysis": "analise",
         "planning": "planejamento"
     }}
     
     # Usar mapeamento ou o tipo original
     template_name = type_mapping.get(doc_type, doc_type)
     template_path = cn_dir / "templates" / f"{{template_name}}.md"
    
    if not template_path.exists():
        print(f"‚ùå Template n√£o encontrado: {{doc_type}}")
        return 1
        
    # Determinar nome do arquivo
    if name:
        filename = f"{{name}}.md"
    else:
        filename = f"{{doc_type}}_{{datetime.now().strftime('%Y%m%d_%H%M%S')}}.md"
        
    # Copiar template
    try:
        import shutil
        from datetime import datetime
        
        shutil.copy2(template_path, filename)
        print(f"‚úÖ Documento criado: {{filename}}")
        print(f"üìù Edite o arquivo e preencha os metadados obrigat√≥rios")
        print(f"üîç Depois execute: cn scan")
        return 0
    except Exception as e:
        print(f"‚ùå Erro ao criar documento: {{e}}")
        return 1

def show_status():
    """Mostra status da instala√ß√£o"""
    cn_dir = find_context_navigator()
    
    if not cn_dir:
        print("‚ùå Context Navigator n√£o instalado neste workspace")
        return 1
        
    # Carregar informa√ß√µes de vers√£o
    version_file = cn_dir / "VERSION"
    if version_file.exists():
        with open(version_file, 'r') as f:
            version_info = json.load(f)
            
        print(f"‚úÖ Context Navigator v{{version_info['version']}}")
        print(f"üìÅ Instalado em: {{cn_dir}}")
        print(f"üìÖ Instalado em: {{version_info['installed_at']}}")
        print(f"üêç Python: {{version_info['python_version']}}")
    else:
        print("‚ö†Ô∏è  Informa√ß√µes de vers√£o n√£o encontradas")
        
    return 0

def main():
    """Fun√ß√£o principal do launcher"""
    if len(sys.argv) < 2:
        show_help()
        return 0
        
    command = sys.argv[1]
    args = sys.argv[2:] if len(sys.argv) > 2 else []
    
    # Comandos principais
    if command == "scan":
        return run_script("context_scanner", args)
    elif command == "demo":
        return run_script("context_demo", ["--full"] + args)
    elif command == "validate":
        return run_script("metrics_validator", args)
    elif command == "check":
        return run_script("context_scanner", ["--verbose"])
    elif command == "patterns":
        return run_script("pattern_detector", args)
    elif command == "conflicts":
        return run_script("conflict_detector", args)
    elif command == "impact":
        return run_script("impact_analyzer", args)
    elif command == "templates":
        return run_script("template_validator", args)
    elif command == "engine":
        return run_script("context_engine", args)
    elif command == "advisor":
        return run_script("context_advisor", args)
        
    # Comandos de cria√ß√£o
    elif command == "new":
        if len(args) < 1:
            print("‚ùå Especifique o tipo de documento")
            print("üí° Tipos: decision, process, reference, architecture, analysis, planning")
            return 1
        doc_type = args[0]
        doc_name = args[1] if len(args) > 1 else None
        return create_document(doc_type, doc_name)
        
    # Comandos de informa√ß√£o
    elif command == "help":
        show_help()
        return 0
    elif command == "version":
        return show_status()
    elif command == "status":
        return show_status()
    else:
        print(f"‚ùå Comando n√£o reconhecido: {{command}}")
        print("üí° Execute 'cn help' para ver comandos dispon√≠veis")
        return 1

if __name__ == "__main__":
    sys.exit(main())
'''
        
        try:
            launcher_path = self.target_path / "cn"
            with open(launcher_path, 'w', encoding='utf-8') as f:
                f.write(launcher_content)
                
            # Tornar execut√°vel
            os.chmod(launcher_path, 0o755)
            
            print(f"‚úÖ Launcher criado: cn")
            print(f"üí° Execute 'cn help' para ver comandos dispon√≠veis")
            return True
        except Exception as e:
            print(f"‚ùå Erro ao criar launcher: {e}")
            return False
            
    def test_installation(self) -> bool:
        """Testa se a instala√ß√£o est√° funcionando"""
        print(f"\nüß™ Testando instala√ß√£o...")
        
        try:
            # Testar launcher
            launcher_path = self.target_path / "cn"
            if not launcher_path.exists():
                print("‚ùå Launcher n√£o encontrado")
                return False
                
            # Testar comando b√°sico
            result = subprocess.run([
                sys.executable, str(launcher_path), "status"
            ], cwd=self.target_path, capture_output=True, text=True)
            
            if result.returncode == 0:
                print("‚úÖ Launcher funcionando")
                return True
            else:
                print(f"‚ùå Erro no launcher: {result.stderr}")
                return False
                
        except Exception as e:
            print(f"‚ùå Erro no teste: {e}")
            return False
            
    def show_completion_message(self) -> None:
        """Mostra mensagem de conclus√£o"""
        print(f"\n" + "="*60)
        print(f"üéâ INSTALA√á√ÉO CONCLU√çDA COM SUCESSO!")
        print(f"="*60)
        print(f"")
        print(f"üìÅ Workspace: {self.target_path}")
        print(f"üì¶ Instala√ß√£o: {self.install_dir}")
        print(f"üîß Launcher: {self.target_path}/cn")
        print(f"")
        print(f"üöÄ PR√ìXIMOS PASSOS:")
        print(f"")
        print(f"1. üìã Ver comandos dispon√≠veis:")
        print(f"   ./cn help")
        print(f"")
        print(f"2. üß™ Testar o sistema:")
        print(f"   ./cn demo")
        print(f"")
        print(f"3. üìù Criar seu primeiro documento:")
        print(f"   ./cn new decision minha_primeira_decisao")
        print(f"")
        print(f"4. üîç Escanear documentos:")
        print(f"   ./cn scan")
        print(f"")
        print(f"5. üìä Validar m√©tricas:")
        print(f"   ./cn validate")
        print(f"")
        print(f"üí° DICAS:")
        print(f"‚Ä¢ Execute './cn status' para ver informa√ß√µes da instala√ß√£o")
        print(f"‚Ä¢ Leia {self.install_dir}/README.md para documenta√ß√£o completa")
        print(f"‚Ä¢ Use './cn check' para verificar a sa√∫de do sistema")
        print(f"")
        print(f"üéØ Transforme sua documenta√ß√£o em navega√ß√£o inteligente!")
        print(f"")
        
    def install(self) -> bool:
        """Executa processo completo de instala√ß√£o"""
        print(f"\nüöÄ Iniciando instala√ß√£o do Context Navigator...")
        
        steps = [
            ("Verificar pr√©-requisitos", self.check_prerequisites),
            ("Fazer backup", self.backup_existing_installation),
            ("Criar diret√≥rios", self.create_installation_directory),
            ("Copiar arquivos", self.copy_files),
            ("Criar vers√£o", self.create_version_file),
            ("Criar context-map", self.create_context_map_directory),
            ("Criar launcher", self.create_launcher_script),
            ("Testar instala√ß√£o", self.test_installation)
        ]
        
        for step_name, step_func in steps:
            print(f"\nüìã {step_name}...")
            if not step_func():
                print(f"‚ùå Falha na etapa: {step_name}")
                return False
                
        self.show_completion_message()
        return True

def main():
    """Fun√ß√£o principal"""
    import argparse
    
    parser = argparse.ArgumentParser(description='Context Navigator Installer')
    parser.add_argument('--target', '-t', default='.',
                       help='Diret√≥rio onde instalar (padr√£o: atual)')
    parser.add_argument('--force', '-f', action='store_true',
                       help='For√ßar instala√ß√£o mesmo se j√° existir')
    
    args = parser.parse_args()
    
    installer = ContextNavigatorInstaller(args.target)
    
    if installer.install():
        print("\n‚úÖ Instala√ß√£o conclu√≠da com sucesso!")
        return 0
    else:
        print("\n‚ùå Falha na instala√ß√£o")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 